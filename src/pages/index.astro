---
import "../styles/global.css";
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import Me from "~/assets/img/me.jpg";

import Skills from "~/components/skills.astro";
import About from "~/components/about.astro";
import Experience from "~/components/experience.astro";

const collectionProjects = await getCollection("projects");
const projects = collectionProjects.sort(
  (a, b) =>
    Date.parse(b.data.date.toString()) - Date.parse(a.data.date.toString()),
);
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Qwik + Astro integration" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Oystr</title>
  </head>
  <body>
    <main
      class="relative container mx-auto px-4 py-5 pb-20 text-sm sm:px-0 md:text-base"
    >
      <section class="mb-20 flex w-full items-center justify-center">
        <div class="flex flex-col items-center gap-4">
          <Image
            src={Me}
            alt="Me"
            class={"rounded-full min-h-40 min-w-40 w-full h-full max-h-40 max-w-40 object-cover"}
          />
          <div class="relative flex flex-col items-center gap-1">
            <p
              class="absolute -top-5 right-0 text-sm text-gray-600 md:text-base"
            >
              @oystr
            </p>
            <h1 class="mb-1 text-xl font-bold text-gray-900 lg:text-5xl">
              Oktavian Yoga Syahputra
            </h1>
            <p class="text-lg font-medium md:text-xl">
              I'm a Software Deve<span class="animate-pulse text-red-900"
                >lover</span
              >
              <span class="animate-pulse">❤️</span>
            </p>
          </div>
        </div>
      </section>

      <About />

      <Experience />

      <!-- Skills  -->
      <Skills />

      <section class="observe skill mb-2 text-xl font-semibold md:text-3xl">
        <h2 class="observe experience mb-4 text-xl font-semibold md:text-3xl">
          Projects
        </h2>

        <div class="embla">
          <div class="embla__viewport">
            <div class="embla__container">
              {
                projects.map((project) => {
                  const data = project.data;
                  return (
                    <div class="embla__slide">
                      <div class="relative h-full w-full rounded-lg border shadow-lg select-none">
                        <Image
                          src={project.data.img ?? ""}
                          class={"h-full w-full rounded-lg object-cover"}
                          alt={project.data.slug}
                        />
                        <div class="absolute top-0 left-0 h-full w-full rounded-lg bg-black/70 px-3 py-3 text-base text-white">
                          <div class="flex items-start justify-between">
                            <div>
                              <p class="text-xl font-semibold">
                                {project.data.name}
                              </p>
                              <p class="text-sm font-normal">
                                {project.data.desc}
                              </p>
                            </div>
                            {(data.web || data.repo) && (
                              <div class="flex items-center gap-3">
                                {data.web && (
                                  <a href={data.web} target="_blank">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="32"
                                      height="32"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        fill="currentColor"
                                        d="M16.36 14c.08-.66.14-1.32.14-2s-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2m-5.15 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95a8.03 8.03 0 0 1-4.33 3.56M14.34 14H9.66c-.1-.66-.16-1.32-.16-2s.06-1.35.16-2h4.68c.09.65.16 1.32.16 2s-.07 1.34-.16 2M12 19.96c-.83-1.2-1.5-2.53-1.91-3.96h3.82c-.41 1.43-1.08 2.76-1.91 3.96M8 8H5.08A7.92 7.92 0 0 1 9.4 4.44C8.8 5.55 8.35 6.75 8 8m-2.92 8H8c.35 1.25.8 2.45 1.4 3.56A8 8 0 0 1 5.08 16m-.82-2C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2s.06 1.34.14 2M12 4.03c.83 1.2 1.5 2.54 1.91 3.97h-3.82c.41-1.43 1.08-2.77 1.91-3.97M18.92 8h-2.95a15.7 15.7 0 0 0-1.38-3.56c1.84.63 3.37 1.9 4.33 3.56M12 2C6.47 2 2 6.5 2 12a10 10 0 0 0 10 10a10 10 0 0 0 10-10A10 10 0 0 0 12 2"
                                      />
                                    </svg>
                                  </a>
                                )}
                                {data.repo && (
                                  <a href={data.repo} target="_blank">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="32"
                                      height="32"
                                      viewBox="0 0 24 24"
                                    >
                                      <path
                                        fill="currentColor"
                                        d="M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5c.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34c-.46-1.16-1.11-1.47-1.11-1.47c-.91-.62.07-.6.07-.6c1 .07 1.53 1.03 1.53 1.03c.87 1.52 2.34 1.07 2.91.83c.09-.65.35-1.09.63-1.34c-2.22-.25-4.55-1.11-4.55-4.92c0-1.11.38-2 1.03-2.71c-.1-.25-.45-1.29.1-2.64c0 0 .84-.27 2.75 1.02c.79-.22 1.65-.33 2.5-.33s1.71.11 2.5.33c1.91-1.29 2.75-1.02 2.75-1.02c.55 1.35.2 2.39.1 2.64c.65.71 1.03 1.6 1.03 2.71c0 3.82-2.34 4.66-4.57 4.91c.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2"
                                      />
                                    </svg>
                                  </a>
                                )}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })
              }
            </div>
          </div>

          <div class="embla__controls">
            <div class="embla__buttons">
              <button class="embla__button embla__button--prev" type="button">
                <svg
                  width={32}
                  height={32}
                  class="embla__button__svg"
                  viewBox="0 0 532 532"
                >
                  <path
                    fill="currentColor"
                    d="M355.66 11.354c13.793-13.805 36.208-13.805 50.001 0 13.785 13.804 13.785 36.238 0 50.034L201.22 266l204.442 204.61c13.785 13.805 13.785 36.239 0 50.044-13.793 13.796-36.208 13.796-50.002 0a5994246.277 5994246.277 0 0 0-229.332-229.454 35.065 35.065 0 0 1-10.326-25.126c0-9.2 3.393-18.26 10.326-25.2C172.192 194.973 332.731 34.31 355.66 11.354Z"
                  ></path>
                </svg>
              </button>

              <button class="embla__button embla__button--next" type="button">
                <svg class="embla__button__svg" viewBox="0 0 532 532">
                  <path
                    fill="currentColor"
                    d="M176.34 520.646c-13.793 13.805-36.208 13.805-50.001 0-13.785-13.804-13.785-36.238 0-50.034L330.78 266 126.34 61.391c-13.785-13.805-13.785-36.239 0-50.044 13.793-13.796 36.208-13.796 50.002 0 22.928 22.947 206.395 206.507 229.332 229.454a35.065 35.065 0 0 1 10.326 25.126c0 9.2-3.393 18.26-10.326 25.2-45.865 45.901-206.404 206.564-229.332 229.52Z"
                  ></path>
                </svg>
              </button>
            </div>

            <div class="embla__dots"></div>
          </div>
        </div>
      </section>
    </main>
  </body>
</html>
<script>
  import EmblaCarousel, {
    type EmblaCarouselType,
    type EmblaOptionsType,
  } from "embla-carousel";

  const addTogglePrevNextBtnsActive = (
    emblaApi: EmblaCarouselType,
    prevBtn: HTMLElement,
    nextBtn: HTMLElement,
  ): (() => void) => {
    const togglePrevNextBtnsState = (): void => {
      if (emblaApi.canScrollPrev()) prevBtn.removeAttribute("disabled");
      else prevBtn.setAttribute("disabled", "disabled");

      if (emblaApi.canScrollNext()) nextBtn.removeAttribute("disabled");
      else nextBtn.setAttribute("disabled", "disabled");
    };

    emblaApi
      .on("select", togglePrevNextBtnsState)
      .on("init", togglePrevNextBtnsState)
      .on("reInit", togglePrevNextBtnsState);

    return (): void => {
      prevBtn.removeAttribute("disabled");
      nextBtn.removeAttribute("disabled");
    };
  };

  export const addPrevNextBtnsClickHandlers = (
    emblaApi: EmblaCarouselType,
    prevBtn: HTMLElement,
    nextBtn: HTMLElement,
  ): (() => void) => {
    const scrollPrev = (): void => {
      emblaApi.scrollPrev();
    };
    const scrollNext = (): void => {
      emblaApi.scrollNext();
    };
    prevBtn.addEventListener("click", scrollPrev, false);
    nextBtn.addEventListener("click", scrollNext, false);

    const removeTogglePrevNextBtnsActive = addTogglePrevNextBtnsActive(
      emblaApi,
      prevBtn,
      nextBtn,
    );

    return (): void => {
      removeTogglePrevNextBtnsActive();
      prevBtn.removeEventListener("click", scrollPrev, false);
      nextBtn.removeEventListener("click", scrollNext, false);
    };
  };

  const addDotBtnsAndClickHandlers = (
    emblaApi: EmblaCarouselType,
    dotsNode: HTMLElement,
  ): (() => void) => {
    let dotNodes: HTMLElement[] = [];

    const addDotBtnsWithClickHandlers = (): void => {
      dotsNode.innerHTML = emblaApi
        .scrollSnapList()
        .map(() => '<button class="embla__dot" type="button"></button>')
        .join("");

      const scrollTo = (index: number): void => {
        emblaApi.scrollTo(index);
      };

      dotNodes = Array.from(dotsNode.querySelectorAll(".embla__dot"));
      dotNodes.forEach((dotNode, index) => {
        dotNode.addEventListener("click", () => scrollTo(index), false);
      });
    };

    const toggleDotBtnsActive = (): void => {
      const previous = emblaApi.previousScrollSnap();
      const selected = emblaApi.selectedScrollSnap();
      dotNodes[previous].classList.remove("embla__dot--selected");
      dotNodes[selected].classList.add("embla__dot--selected");
    };

    emblaApi
      .on("init", addDotBtnsWithClickHandlers)
      .on("reInit", addDotBtnsWithClickHandlers)
      .on("init", toggleDotBtnsActive)
      .on("reInit", toggleDotBtnsActive)
      .on("select", toggleDotBtnsActive);

    return (): void => {
      dotsNode.innerHTML = "";
    };
  };

  const OPTIONS: EmblaOptionsType = { loop: true };

  const emblaNode = document.querySelector(".embla") as HTMLElement;
  const viewportNode = emblaNode.querySelector(
    ".embla__viewport",
  ) as HTMLElement;
  const prevBtnNode = emblaNode.querySelector(
    ".embla__button--prev",
  ) as HTMLElement;

  const nextBtnNode = emblaNode.querySelector(
    ".embla__button--next",
  ) as HTMLElement;
  const dotsNode = emblaNode.querySelector(".embla__dots") as HTMLElement;

  const emblaApi = EmblaCarousel(viewportNode, OPTIONS);

  const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(
    emblaApi,
    prevBtnNode,
    nextBtnNode,
  );
  const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(
    emblaApi,
    dotsNode,
  );

  emblaApi.on("destroy", removePrevNextBtnsClickHandlers);
  emblaApi.on("destroy", removeDotBtnsAndClickHandlers);
</script>
